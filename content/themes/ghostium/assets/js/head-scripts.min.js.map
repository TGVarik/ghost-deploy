{"version":3,"file":"head-scripts.min.js","sources":["../../../.tmp/concat/assets/js/head-scripts.min.js"],"names":["window","Modernizr","document","undefined","setCss","str","mStyle","cssText","setCssAll","str1","str2","prefixes","join","is","obj","type","contains","substr","indexOf","testProps","props","prefixed","i","prop","testDOMProps","elem","item","bind","testPropsAll","ucProp","charAt","toUpperCase","slice","cssomPrefixes","split","webforms","len","length","attrs","inputElem","list","createElement","HTMLDataListElement","bool","inputElemType","defaultView","setAttribute","value","smile","style","test","WebkitAppearance","docElement","appendChild","getComputedStyle","offsetHeight","removeChild","checkValidity","inputs","featureName","hasOwnProp","version","enableClasses","documentElement","mod","modElem","toString","omPrefixes","domPrefixes","toLowerCase","ns","svg","tests","classes","injectElementWithStyles","rule","callback","nodes","testnames","ret","node","docOverflow","div","body","fakeBody","parseInt","id","innerHTML","background","overflow","parentNode","testMediaQuery","mq","matchMedia","msMatchMedia","matches","currentStyle","isEventSupported","eventName","element","TAGNAMES","isSupported","removeAttribute","select","change","submit","reset","error","load","abort","_hasOwnProperty","hasOwnProperty","call","object","property","constructor","prototype","Function","that","target","this","TypeError","args","arguments","bound","F","self","result","apply","concat","Object","getContext","fillText","WebGLRenderingContext","DocumentTouch","offsetTop","navigator","postMessage","openDatabase","documentMode","history","pushState","backgroundColor","textShadow","opacity","str3","backgroundImage","offsetLeft","getElementById","sheet","styleSheet","cssRules","canPlayType","Boolean","ogg","replace","h264","webm","e","mp3","wav","m4a","localStorage","setItem","removeItem","sessionStorage","Worker","applicationCache","createElementNS","createSVGRect","firstChild","namespaceURI","feature","push","input","addTest","key","className","addStyleSheet","ownerDocument","p","parent","getElementsByTagName","insertBefore","lastChild","getElements","elements","html5","getExpandoData","data","expandoData","expando","expanID","nodeName","supportsUnknownElements","cache","cloneNode","saveClones","createElem","canHaveChildren","reSkip","frag","createDocumentFragment","clone","elems","l","shivMethods","createFrag","shivDocument","shivCSS","supportsHtml5Styles","hasCSS","options","a","childNodes","_version","_prefixes","_domPrefixes","_cssomPrefixes","hasEvent","testProp","testAllProps","testStyles","AjaxMonitor","Bar","DocumentMonitor","ElementMonitor","ElementTracker","EventLagMonitor","Evented","Events","NoTargetError","RequestIntercept","SOURCE_KEYS","Scaler","SocketRequestTracker","XHRRequestTracker","animation","avgAmplitude","bar","cancelAnimation","cancelAnimationFrame","defaultOptions","extend","extendNative","getFromDOM","getIntercept","handlePushState","ignoreStack","init","now","requestAnimationFrame","runAnimation","scalers","shouldIgnoreURL","shouldTrack","source","sources","uniScaler","_WebSocket","_XDomainRequest","_XMLHttpRequest","_i","_intercept","_len","_pushState","_ref","_ref1","_replaceState","__slice","__hasProp","__extends","child","ctor","__super__","__indexOf","catchupTime","initialRate","minTime","ghostTime","maxProgressPerFrame","easeFactor","startOnPageLoad","restartOnPushState","restartOnRequestAfter","checkInterval","selectors","eventLag","minSamples","sampleCount","lagThreshold","ajax","trackMethods","trackWebSockets","ignoreURLs","performance","Date","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","mozCancelAnimationFrame","fn","setTimeout","clearTimeout","last","tick","diff","out","val","arr","count","sum","v","Math","abs","json","el","querySelector","getAttribute","JSON","parse","_error","console","on","event","handler","ctx","once","_base","bindings","off","_results","splice","trigger","Pace","paceOptions","_super","Error","progress","getElement","targetElement","finish","update","prog","render","destroy","progressStr","children","width","lastRenderedProgress","done","name","binding","_j","_len1","_ref2","XMLHttpRequest","XDomainRequest","WebSocket","to","from","ignore","unshift","shift","track","method","monitorXHR","_this","req","_open","open","url","request","flags","protocols","pattern","_arg","after","running","stillActive","_ref3","readyState","restart","watch","tracker","size","_onreadystatechange","ProgressEvent","addEventListener","evt","lengthComputable","loaded","total","onreadystatechange","selector","check","states","loading","interactive","complete","avg","interval","points","samples","setInterval","clearInterval","sinceLastUpdate","rate","catchup","lastProgress","frameTime","scaling","pow","min","max","replaceState","_k","_len2","_ref4","extraSources","stop","start","go","enqueueNextFrame","j","remaining","scaler","scalerList","_options","define","amd","exports","module"],"mappings":"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","sourcesContent":["/*!\n * Ghostium\n * A Ghost theme focused on content based on Medium design/ux\n * http://ghostium.oswaldoacauan.com/\n * @author Oswaldo Acauan http://oswaldoacauan.com\n * @version 2.2.1\n * Copyright 2013. MIT licensed.\n */\n/*!\n * Modernizr v2.6.3\n * www.modernizr.com\n *\n * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton\n * Available under the BSD and MIT licenses: www.modernizr.com/license/\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in\n * the current UA and makes the results available to you in two ways:\n * as properties on a global Modernizr object, and as classes on the\n * <html> element. This information allows you to progressively enhance\n * your pages with a granular level of control over the experience.\n *\n * Modernizr has an optional (not included) conditional resource loader\n * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n * To get a build that includes Modernizr.load(), as well as choosing\n * which tests to include, go to www.modernizr.com/download/\n *\n * Authors        Faruk Ates, Paul Irish, Alex Sexton\n * Contributors   Ryan Seddon, Ben Alman\n */\n\nwindow.Modernizr = (function( window, document, undefined ) {\n\n    var version = '2.6.3',\n\n    Modernizr = {},\n\n    /*>>cssclasses*/\n    // option for enabling the HTML classes to be added\n    enableClasses = true,\n    /*>>cssclasses*/\n\n    docElement = document.documentElement,\n\n    /**\n     * Create our \"modernizr\" element that we do most feature tests on.\n     */\n    mod = 'modernizr',\n    modElem = document.createElement(mod),\n    mStyle = modElem.style,\n\n    /**\n     * Create the input element for various Web Forms feature tests.\n     */\n    inputElem /*>>inputelem*/ = document.createElement('input') /*>>inputelem*/ ,\n\n    /*>>smile*/\n    smile = ':)',\n    /*>>smile*/\n\n    toString = {}.toString,\n\n    // TODO :: make the prefixes more granular\n    /*>>prefixes*/\n    // List of property values to set for css tests. See ticket #21\n    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),\n    /*>>prefixes*/\n\n    /*>>domprefixes*/\n    // Following spec is to expose vendor-specific style properties as:\n    //   elem.style.WebkitBorderRadius\n    // and the following would be incorrect:\n    //   elem.style.webkitBorderRadius\n\n    // Webkit ghosts their properties in lowercase but Opera & Moz do not.\n    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n    //   erik.eae.net/archives/2008/03/10/21.48.10/\n\n    // More here: github.com/Modernizr/Modernizr/issues/issue/21\n    omPrefixes = 'Webkit Moz O ms',\n\n    cssomPrefixes = omPrefixes.split(' '),\n\n    domPrefixes = omPrefixes.toLowerCase().split(' '),\n    /*>>domprefixes*/\n\n    /*>>ns*/\n    ns = {'svg': 'http://www.w3.org/2000/svg'},\n    /*>>ns*/\n\n    tests = {},\n    inputs = {},\n    attrs = {},\n\n    classes = [],\n\n    slice = classes.slice,\n\n    featureName, // used in testing loop\n\n\n    /*>>teststyles*/\n    // Inject element with style element and some CSS rules\n    injectElementWithStyles = function( rule, callback, nodes, testnames ) {\n\n      var style, ret, node, docOverflow,\n          div = document.createElement('div'),\n          // After page load injecting a fake body doesn't work so check if body exists\n          body = document.body,\n          // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.\n          fakeBody = body || document.createElement('body');\n\n      if ( parseInt(nodes, 10) ) {\n          // In order not to give false positives we create a node for each test\n          // This also allows the method to scale for unspecified uses\n          while ( nodes-- ) {\n              node = document.createElement('div');\n              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n              div.appendChild(node);\n          }\n      }\n\n      // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed\n      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element\n      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.\n      // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx\n      // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277\n      style = ['&#173;','<style id=\"s', mod, '\">', rule, '</style>'].join('');\n      div.id = mod;\n      // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n      (body ? div : fakeBody).innerHTML += style;\n      fakeBody.appendChild(div);\n      if ( !body ) {\n          //avoid crashing IE8, if background image is used\n          fakeBody.style.background = '';\n          //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n          fakeBody.style.overflow = 'hidden';\n          docOverflow = docElement.style.overflow;\n          docElement.style.overflow = 'hidden';\n          docElement.appendChild(fakeBody);\n      }\n\n      ret = callback(div, rule);\n      // If this is done after page load we don't want to remove the body so check if body exists\n      if ( !body ) {\n          fakeBody.parentNode.removeChild(fakeBody);\n          docElement.style.overflow = docOverflow;\n      } else {\n          div.parentNode.removeChild(div);\n      }\n\n      return !!ret;\n\n    },\n    /*>>teststyles*/\n\n    /*>>mq*/\n    // adapted from matchMedia polyfill\n    // by Scott Jehl and Paul Irish\n    // gist.github.com/786768\n    testMediaQuery = function( mq ) {\n\n      var matchMedia = window.matchMedia || window.msMatchMedia;\n      if ( matchMedia ) {\n        return matchMedia(mq).matches;\n      }\n\n      var bool;\n\n      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {\n        bool = (window.getComputedStyle ?\n                  getComputedStyle(node, null) :\n                  node.currentStyle)['position'] == 'absolute';\n      });\n\n      return bool;\n\n     },\n     /*>>mq*/\n\n\n    /*>>hasevent*/\n    //\n    // isEventSupported determines if a given element supports the given event\n    // kangax.github.com/iseventsupported/\n    //\n    // The following results are known incorrects:\n    //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative\n    //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333\n    //   ...\n    isEventSupported = (function() {\n\n      var TAGNAMES = {\n        'select': 'input', 'change': 'input',\n        'submit': 'form', 'reset': 'form',\n        'error': 'img', 'load': 'img', 'abort': 'img'\n      };\n\n      function isEventSupported( eventName, element ) {\n\n        element = element || document.createElement(TAGNAMES[eventName] || 'div');\n        eventName = 'on' + eventName;\n\n        // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and \"resize\", whereas `in` \"catches\" those\n        var isSupported = eventName in element;\n\n        if ( !isSupported ) {\n          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element\n          if ( !element.setAttribute ) {\n            element = document.createElement('div');\n          }\n          if ( element.setAttribute && element.removeAttribute ) {\n            element.setAttribute(eventName, '');\n            isSupported = is(element[eventName], 'function');\n\n            // If property was created, \"remove it\" (by setting value to `undefined`)\n            if ( !is(element[eventName], 'undefined') ) {\n              element[eventName] = undefined;\n            }\n            element.removeAttribute(eventName);\n          }\n        }\n\n        element = null;\n        return isSupported;\n      }\n      return isEventSupported;\n    })(),\n    /*>>hasevent*/\n\n    // TODO :: Add flag for hasownprop ? didn't last time\n\n    // hasOwnProperty shim by kangax needed for Safari 2.0 support\n    _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;\n\n    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {\n      hasOwnProp = function (object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    }\n    else {\n      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n      };\n    }\n\n    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js\n    // es5.github.com/#x15.3.4.5\n\n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function bind(that) {\n\n        var target = this;\n\n        if (typeof target != \"function\") {\n            throw new TypeError();\n        }\n\n        var args = slice.call(arguments, 1),\n            bound = function () {\n\n            if (this instanceof bound) {\n\n              var F = function(){};\n              F.prototype = target.prototype;\n              var self = new F();\n\n              var result = target.apply(\n                  self,\n                  args.concat(slice.call(arguments))\n              );\n              if (Object(result) === result) {\n                  return result;\n              }\n              return self;\n\n            } else {\n\n              return target.apply(\n                  that,\n                  args.concat(slice.call(arguments))\n              );\n\n            }\n\n        };\n\n        return bound;\n      };\n    }\n\n    /**\n     * setCss applies given styles to the Modernizr DOM node.\n     */\n    function setCss( str ) {\n        mStyle.cssText = str;\n    }\n\n    /**\n     * setCssAll extrapolates all vendor-specific css strings.\n     */\n    function setCssAll( str1, str2 ) {\n        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));\n    }\n\n    /**\n     * is returns a boolean for if typeof obj is exactly type.\n     */\n    function is( obj, type ) {\n        return typeof obj === type;\n    }\n\n    /**\n     * contains returns a boolean for if substr is found within str.\n     */\n    function contains( str, substr ) {\n        return !!~('' + str).indexOf(substr);\n    }\n\n    /*>>testprop*/\n\n    // testProps is a generic CSS / DOM property test.\n\n    // In testing support for a given CSS property, it's legit to test:\n    //    `elem.style[styleName] !== undefined`\n    // If the property is supported it will return an empty string,\n    // if unsupported it will return undefined.\n\n    // We'll take advantage of this quick test and skip setting a style\n    // on our modernizr element, but instead just testing undefined vs\n    // empty string.\n\n    // Because the testing of the CSS property names (with \"-\", as\n    // opposed to the camelCase DOM properties) is non-portable and\n    // non-standard but works in WebKit and IE (but not Gecko or Opera),\n    // we explicitly reject properties with dashes so that authors\n    // developing in WebKit or IE first don't end up with\n    // browser-specific content by accident.\n\n    function testProps( props, prefixed ) {\n        for ( var i in props ) {\n            var prop = props[i];\n            if ( !contains(prop, \"-\") && mStyle[prop] !== undefined ) {\n                return prefixed == 'pfx' ? prop : true;\n            }\n        }\n        return false;\n    }\n    /*>>testprop*/\n\n    // TODO :: add testDOMProps\n    /**\n     * testDOMProps is a generic DOM property test; if a browser supports\n     *   a certain property, it won't return undefined for it.\n     */\n    function testDOMProps( props, obj, elem ) {\n        for ( var i in props ) {\n            var item = obj[props[i]];\n            if ( item !== undefined) {\n\n                // return the property name as a string\n                if (elem === false) return props[i];\n\n                // let's bind a function\n                if (is(item, 'function')){\n                  // default to autobind unless override\n                  return item.bind(elem || obj);\n                }\n\n                // return the unbound function or obj or value\n                return item;\n            }\n        }\n        return false;\n    }\n\n    /*>>testallprops*/\n    /**\n     * testPropsAll tests a list of DOM properties we want to check against.\n     *   We specify literally ALL possible (known and/or likely) properties on\n     *   the element including the non-vendor prefixed one, for forward-\n     *   compatibility.\n     */\n    function testPropsAll( prop, prefixed, elem ) {\n\n        var ucProp  = prop.charAt(0).toUpperCase() + prop.slice(1),\n            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n        // did they call .prefixed('boxSizing') or are we just testing a prop?\n        if(is(prefixed, \"string\") || is(prefixed, \"undefined\")) {\n          return testProps(props, prefixed);\n\n        // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n        } else {\n          props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n          return testDOMProps(props, prefixed, elem);\n        }\n    }\n    /*>>testallprops*/\n\n\n    /**\n     * Tests\n     * -----\n     */\n\n    // The *new* flexbox\n    // dev.w3.org/csswg/css3-flexbox\n\n    tests['flexbox'] = function() {\n      return testPropsAll('flexWrap');\n    };\n\n    // The *old* flexbox\n    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/\n\n    tests['flexboxlegacy'] = function() {\n        return testPropsAll('boxDirection');\n    };\n\n    // On the S60 and BB Storm, getContext exists, but always returns undefined\n    // so we actually have to call getContext() to verify\n    // github.com/Modernizr/Modernizr/issues/issue/97/\n\n    tests['canvas'] = function() {\n        var elem = document.createElement('canvas');\n        return !!(elem.getContext && elem.getContext('2d'));\n    };\n\n    tests['canvastext'] = function() {\n        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));\n    };\n\n    // webk.it/70117 is tracking a legit WebGL feature detect proposal\n\n    // We do a soft detect which may false positive in order to avoid\n    // an expensive context creation: bugzil.la/732441\n\n    tests['webgl'] = function() {\n        return !!window.WebGLRenderingContext;\n    };\n\n    /*\n     * The Modernizr.touch test only indicates if the browser supports\n     *    touch events, which does not necessarily reflect a touchscreen\n     *    device, as evidenced by tablets running Windows 7 or, alas,\n     *    the Palm Pre / WebOS (touch) phones.\n     *\n     * Additionally, Chrome (desktop) used to lie about its support on this,\n     *    but that has since been rectified: crbug.com/36415\n     *\n     * We also test for Firefox 4 Multitouch Support.\n     *\n     * For more info, see: modernizr.github.com/Modernizr/touch.html\n     */\n\n    tests['touch'] = function() {\n        var bool;\n\n        if(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\n          bool = true;\n        } else {\n          injectElementWithStyles(['@media (',prefixes.join('touch-enabled),('),mod,')','{#modernizr{top:9px;position:absolute}}'].join(''), function( node ) {\n            bool = node.offsetTop === 9;\n          });\n        }\n\n        return bool;\n    };\n\n\n    // geolocation is often considered a trivial feature detect...\n    // Turns out, it's quite tricky to get right:\n    //\n    // Using !!navigator.geolocation does two things we don't want. It:\n    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513\n    //   2. Disables page caching in WebKit: webk.it/43956\n    //\n    // Meanwhile, in Firefox < 8, an about:config setting could expose\n    // a false positive that would throw an exception: bugzil.la/688158\n\n    tests['geolocation'] = function() {\n        return 'geolocation' in navigator;\n    };\n\n\n    tests['postmessage'] = function() {\n      return !!window.postMessage;\n    };\n\n\n    // Chrome incognito mode used to throw an exception when using openDatabase\n    // It doesn't anymore.\n    tests['websqldatabase'] = function() {\n      return !!window.openDatabase;\n    };\n\n    // Vendors had inconsistent prefixing with the experimental Indexed DB:\n    // - Webkit's implementation is accessible through webkitIndexedDB\n    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB\n    // For speed, we don't test the legacy (and beta-only) indexedDB\n    tests['indexedDB'] = function() {\n      return !!testPropsAll(\"indexedDB\", window);\n    };\n\n    // documentMode logic from YUI to filter out IE8 Compat Mode\n    //   which false positives.\n    tests['hashchange'] = function() {\n      return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);\n    };\n\n    // Per 1.6:\n    // This used to be Modernizr.historymanagement but the longer\n    // name has been deprecated in favor of a shorter and property-matching one.\n    // The old API is still available in 1.6, but as of 2.0 will throw a warning,\n    // and in the first release thereafter disappear entirely.\n    tests['history'] = function() {\n      return !!(window.history && history.pushState);\n    };\n\n    tests['draganddrop'] = function() {\n        var div = document.createElement('div');\n        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);\n    };\n\n    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10\n    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.\n    // FF10 still uses prefixes, so check for it until then.\n    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/\n    tests['websockets'] = function() {\n        return 'WebSocket' in window || 'MozWebSocket' in window;\n    };\n\n\n    // css-tricks.com/rgba-browser-support/\n    tests['rgba'] = function() {\n        // Set an rgba() color and check the returned value\n\n        setCss('background-color:rgba(150,255,150,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba');\n    };\n\n    tests['hsla'] = function() {\n        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,\n        //   except IE9 who retains it as hsla\n\n        setCss('background-color:hsla(120,40%,100%,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');\n    };\n\n    tests['multiplebgs'] = function() {\n        // Setting multiple images AND a color on the background shorthand property\n        //  and then querying the style.background property value for the number of\n        //  occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!\n\n        setCss('background:url(https://),url(https://),red url(https://)');\n\n        // If the UA supports multiple backgrounds, there should be three occurrences\n        //   of the string \"url(\" in the return value for elemStyle.background\n\n        return (/(url\\s*\\(.*?){3}/).test(mStyle.background);\n    };\n\n\n\n    // this will false positive in Opera Mini\n    //   github.com/Modernizr/Modernizr/issues/396\n\n    tests['backgroundsize'] = function() {\n        return testPropsAll('backgroundSize');\n    };\n\n    tests['borderimage'] = function() {\n        return testPropsAll('borderImage');\n    };\n\n\n    // Super comprehensive table about all the unique implementations of\n    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance\n\n    tests['borderradius'] = function() {\n        return testPropsAll('borderRadius');\n    };\n\n    // WebOS unfortunately false positives on this test.\n    tests['boxshadow'] = function() {\n        return testPropsAll('boxShadow');\n    };\n\n    // FF3.0 will false positive on this test\n    tests['textshadow'] = function() {\n        return document.createElement('div').style.textShadow === '';\n    };\n\n\n    tests['opacity'] = function() {\n        // Browsers that actually have CSS Opacity implemented have done so\n        //  according to spec, which means their return values are within the\n        //  range of [0.0,1.0] - including the leading zero.\n\n        setCssAll('opacity:.55');\n\n        // The non-literal . in this regex is intentional:\n        //   German Chrome returns this value as 0,55\n        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632\n        return (/^0.55$/).test(mStyle.opacity);\n    };\n\n\n    // Note, Android < 4 will pass this test, but can only animate\n    //   a single property at a time\n    //   daneden.me/2011/12/putting-up-with-androids-bullshit/\n    tests['cssanimations'] = function() {\n        return testPropsAll('animationName');\n    };\n\n\n    tests['csscolumns'] = function() {\n        return testPropsAll('columnCount');\n    };\n\n\n    tests['cssgradients'] = function() {\n        /**\n         * For CSS Gradients syntax, please see:\n         * webkit.org/blog/175/introducing-css-gradients/\n         * developer.mozilla.org/en/CSS/-moz-linear-gradient\n         * developer.mozilla.org/en/CSS/-moz-radial-gradient\n         * dev.w3.org/csswg/css3-images/#gradients-\n         */\n\n        var str1 = 'background-image:',\n            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',\n            str3 = 'linear-gradient(left top,#9f9, white);';\n\n        setCss(\n             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)\n              (str1 + '-webkit- '.split(' ').join(str2 + str1) +\n             // standard syntax             // trailing 'background-image:'\n              prefixes.join(str3 + str1)).slice(0, -str1.length)\n        );\n\n        return contains(mStyle.backgroundImage, 'gradient');\n    };\n\n\n    tests['cssreflections'] = function() {\n        return testPropsAll('boxReflect');\n    };\n\n\n    tests['csstransforms'] = function() {\n        return !!testPropsAll('transform');\n    };\n\n\n    tests['csstransforms3d'] = function() {\n\n        var ret = !!testPropsAll('perspective');\n\n        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\n        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n        //   some conditions. As a result, Webkit typically recognizes the syntax but\n        //   will sometimes throw a false positive, thus we must do a more thorough check:\n        if ( ret && 'webkitPerspective' in docElement.style ) {\n\n          // Webkit allows this media query to succeed only if the feature is enabled.\n          // `@media (transform-3d),(-webkit-transform-3d){ ... }`\n          injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function( node, rule ) {\n            ret = node.offsetLeft === 9 && node.offsetHeight === 3;\n          });\n        }\n        return ret;\n    };\n\n\n    tests['csstransitions'] = function() {\n        return testPropsAll('transition');\n    };\n\n\n    /*>>fontface*/\n    // @font-face detection routine by Diego Perini\n    // javascript.nwbox.com/CSSSupport/\n\n    // false positives:\n    //   WebOS github.com/Modernizr/Modernizr/issues/342\n    //   WP7   github.com/Modernizr/Modernizr/issues/538\n    tests['fontface'] = function() {\n        var bool;\n\n        injectElementWithStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function( node, rule ) {\n          var style = document.getElementById('smodernizr'),\n              sheet = style.sheet || style.styleSheet,\n              cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';\n\n          bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;\n        });\n\n        return bool;\n    };\n    /*>>fontface*/\n\n    // CSS generated content detection\n    tests['generatedcontent'] = function() {\n        var bool;\n\n        injectElementWithStyles(['#',mod,'{font:0/0 a}#',mod,':after{content:\"',smile,'\";visibility:hidden;font:3px/1 a}'].join(''), function( node ) {\n          bool = node.offsetHeight >= 3;\n        });\n\n        return bool;\n    };\n\n\n\n    // These tests evaluate support of the video/audio elements, as well as\n    // testing what types of content they support.\n    //\n    // We're using the Boolean constructor here, so that we can extend the value\n    // e.g.  Modernizr.video     // true\n    //       Modernizr.video.ogg // 'probably'\n    //\n    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n    //                     thx to NielsLeenheer and zcorpan\n\n    // Note: in some older browsers, \"no\" was a return value instead of empty string.\n    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n\n    tests['video'] = function() {\n        var elem = document.createElement('video'),\n            bool = false;\n\n        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('video/ogg; codecs=\"theora\"')      .replace(/^no$/,'');\n\n                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n                bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"') .replace(/^no$/,'');\n\n                bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/,'');\n            }\n\n        } catch(e) { }\n\n        return bool;\n    };\n\n    tests['audio'] = function() {\n        var elem = document.createElement('audio'),\n            bool = false;\n\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');\n                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');\n\n                // Mimetypes accepted:\n                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n                //   bit.ly/iphoneoscodecs\n                bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"')     .replace(/^no$/,'');\n                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||\n                              elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');\n            }\n        } catch(e) { }\n\n        return bool;\n    };\n\n\n    // In FF4, if disabled, window.localStorage should === null.\n\n    // Normally, we could not test that directly and need to do a\n    //   `('localStorage' in window) && ` test first because otherwise Firefox will\n    //   throw bugzil.la/365772 if cookies are disabled\n\n    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem\n    // will throw the exception:\n    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.\n    // Peculiarly, getItem and removeItem calls do not throw.\n\n    // Because we are forced to try/catch this, we'll go aggressive.\n\n    // Just FWIW: IE8 Compat mode supports these features completely:\n    //   www.quirksmode.org/dom/html5.html\n    // But IE8 doesn't support either with local files\n\n    tests['localstorage'] = function() {\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    tests['sessionstorage'] = function() {\n        try {\n            sessionStorage.setItem(mod, mod);\n            sessionStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n\n    tests['webworkers'] = function() {\n        return !!window.Worker;\n    };\n\n\n    tests['applicationcache'] = function() {\n        return !!window.applicationCache;\n    };\n\n\n    // Thanks to Erik Dahlstrom\n    tests['svg'] = function() {\n        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;\n    };\n\n    // specifically for SVG inline in HTML, not within XHTML\n    // test page: paulirish.com/demo/inline-svg\n    tests['inlinesvg'] = function() {\n      var div = document.createElement('div');\n      div.innerHTML = '<svg/>';\n      return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;\n    };\n\n    // SVG SMIL animation\n    tests['smil'] = function() {\n        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));\n    };\n\n    // This test is only for clip paths in SVG proper, not clip paths on HTML content\n    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\n\n    // However read the comments to dig into applying SVG clippaths to HTML content here:\n    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491\n    tests['svgclippaths'] = function() {\n        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));\n    };\n\n    /*>>webforms*/\n    // input features and input types go directly onto the ret object, bypassing the tests loop.\n    // Hold this guy to execute in a moment.\n    function webforms() {\n        /*>>input*/\n        // Run through HTML5's new input attributes to see if the UA understands any.\n        // We're using f which is the <input> element created early on\n        // Mike Taylr has created a comprehensive resource for testing these attributes\n        //   when applied to all input types:\n        //   miketaylr.com/code/input-type-attr.html\n        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n\n        // Only input placeholder is tested while textarea's placeholder is not.\n        // Currently Safari 4 and Opera 11 have support only for the input placeholder\n        // Both tests are available in feature-detects/forms-placeholder.js\n        Modernizr['input'] = (function( props ) {\n            for ( var i = 0, len = props.length; i < len; i++ ) {\n                attrs[ props[i] ] = !!(props[i] in inputElem);\n            }\n            if (attrs.list){\n              // safari false positive's on datalist: webk.it/74252\n              // see also github.com/Modernizr/Modernizr/issues/146\n              attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);\n            }\n            return attrs;\n        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));\n        /*>>input*/\n\n        /*>>inputtypes*/\n        // Run through HTML5's new input types to see if the UA understands any.\n        //   This is put behind the tests runloop because it doesn't return a\n        //   true/false like all the other tests; instead, it returns an object\n        //   containing each input type with its corresponding true/false value\n\n        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/\n        Modernizr['inputtypes'] = (function(props) {\n\n            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {\n\n                inputElem.setAttribute('type', inputElemType = props[i]);\n                bool = inputElem.type !== 'text';\n\n                // We first check to see if the type we give it sticks..\n                // If the type does, we feed it a textual value, which shouldn't be valid.\n                // If the value doesn't stick, we know there's input sanitization which infers a custom UI\n                if ( bool ) {\n\n                    inputElem.value         = smile;\n                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';\n\n                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {\n\n                      docElement.appendChild(inputElem);\n                      defaultView = document.defaultView;\n\n                      // Safari 2-4 allows the smiley as a value, despite making a slider\n                      bool =  defaultView.getComputedStyle &&\n                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&\n                              // Mobile android web browser has false positive, so must\n                              // check the height to see if the widget is actually there.\n                              (inputElem.offsetHeight !== 0);\n\n                      docElement.removeChild(inputElem);\n\n                    } else if ( /^(search|tel)$/.test(inputElemType) ){\n                      // Spec doesn't define any special parsing or detectable UI\n                      //   behaviors so we pass these through as true\n\n                      // Interestingly, opera fails the earlier test, so it doesn't\n                      //  even make it here.\n\n                    } else if ( /^(url|email)$/.test(inputElemType) ) {\n                      // Real url and email support comes with prebaked validation.\n                      bool = inputElem.checkValidity && inputElem.checkValidity() === false;\n\n                    } else {\n                      // If the upgraded input compontent rejects the :) text, we got a winner\n                      bool = inputElem.value != smile;\n                    }\n                }\n\n                inputs[ props[i] ] = !!bool;\n            }\n            return inputs;\n        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));\n        /*>>inputtypes*/\n    }\n    /*>>webforms*/\n\n\n    // End of test definitions\n    // -----------------------\n\n\n\n    // Run through all tests and detect their support in the current UA.\n    // todo: hypothetically we could be doing an array of tests and use a basic loop here.\n    for ( var feature in tests ) {\n        if ( hasOwnProp(tests, feature) ) {\n            // run the test, throw the return value into the Modernizr,\n            //   then based on that boolean, define an appropriate className\n            //   and push it into an array of classes we'll join later.\n            featureName  = feature.toLowerCase();\n            Modernizr[featureName] = tests[feature]();\n\n            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);\n        }\n    }\n\n    /*>>webforms*/\n    // input tests need to run.\n    Modernizr.input || webforms();\n    /*>>webforms*/\n\n\n    /**\n     * addTest allows the user to define their own feature tests\n     * the result will be added onto the Modernizr object,\n     * as well as an appropriate className set on the html element\n     *\n     * @param feature - String naming the feature\n     * @param test - Function returning true if feature is supported, false if not\n     */\n     Modernizr.addTest = function ( feature, test ) {\n       if ( typeof feature == 'object' ) {\n         for ( var key in feature ) {\n           if ( hasOwnProp( feature, key ) ) {\n             Modernizr.addTest( key, feature[ key ] );\n           }\n         }\n       } else {\n\n         feature = feature.toLowerCase();\n\n         if ( Modernizr[feature] !== undefined ) {\n           // we're going to quit if you're trying to overwrite an existing test\n           // if we were to allow it, we'd do this:\n           //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n           //   docElement.className = docElement.className.replace( re, '' );\n           // but, no rly, stuff 'em.\n           return Modernizr;\n         }\n\n         test = typeof test == 'function' ? test() : test;\n\n         if (typeof enableClasses !== \"undefined\" && enableClasses) {\n           docElement.className += ' ' + (test ? '' : 'no-') + feature;\n         }\n         Modernizr[feature] = test;\n\n       }\n\n       return Modernizr; // allow chaining.\n     };\n\n\n    // Reset modElem.cssText to nothing to reduce memory footprint.\n    setCss('');\n    modElem = inputElem = null;\n\n    /*>>shiv*/\n    /*! HTML5 Shiv v3.6.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed */\n    ;(function(window, document) {\n    /*jshint evil:true */\n      /** Preset options */\n      var options = window.html5 || {};\n\n      /** Used to skip problem elements */\n      var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n      /** Not all elements can be cloned in IE **/\n      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n      /** Detect whether the browser supports default html5 styles */\n      var supportsHtml5Styles;\n\n      /** Name of the expando, to work with multiple documents or to re-shiv one document */\n      var expando = '_html5shiv';\n\n      /** The id for the the documents expando */\n      var expanID = 0;\n\n      /** Cached data for each document */\n      var expandoData = {};\n\n      /** Detect whether the browser supports unknown elements */\n      var supportsUnknownElements;\n\n      (function() {\n        try {\n            var a = document.createElement('a');\n            a.innerHTML = '<xyz></xyz>';\n            //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n            supportsHtml5Styles = ('hidden' in a);\n\n            supportsUnknownElements = a.childNodes.length == 1 || (function() {\n              // assign a false positive if unable to shiv\n              (document.createElement)('a');\n              var frag = document.createDocumentFragment();\n              return (\n                typeof frag.cloneNode == 'undefined' ||\n                typeof frag.createDocumentFragment == 'undefined' ||\n                typeof frag.createElement == 'undefined'\n              );\n            }());\n        } catch(e) {\n          supportsHtml5Styles = true;\n          supportsUnknownElements = true;\n        }\n\n      }());\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Creates a style sheet with the given CSS text and adds it to the document.\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @param {String} cssText The CSS text.\n       * @returns {StyleSheet} The style element.\n       */\n      function addStyleSheet(ownerDocument, cssText) {\n        var p = ownerDocument.createElement('p'),\n            parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n        p.innerHTML = 'x<style>' + cssText + '</style>';\n        return parent.insertBefore(p.lastChild, parent.firstChild);\n      }\n\n      /**\n       * Returns the value of `html5.elements` as an array.\n       * @private\n       * @returns {Array} An array of shived element node names.\n       */\n      function getElements() {\n        var elements = html5.elements;\n        return typeof elements == 'string' ? elements.split(' ') : elements;\n      }\n\n        /**\n       * Returns the data associated to the given document\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @returns {Object} An object of data.\n       */\n      function getExpandoData(ownerDocument) {\n        var data = expandoData[ownerDocument[expando]];\n        if (!data) {\n            data = {};\n            expanID++;\n            ownerDocument[expando] = expanID;\n            expandoData[expanID] = data;\n        }\n        return data;\n      }\n\n      /**\n       * returns a shived element for the given nodeName and document\n       * @memberOf html5\n       * @param {String} nodeName name of the element\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived element.\n       */\n      function createElement(nodeName, ownerDocument, data){\n        if (!ownerDocument) {\n            ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n            return ownerDocument.createElement(nodeName);\n        }\n        if (!data) {\n            data = getExpandoData(ownerDocument);\n        }\n        var node;\n\n        if (data.cache[nodeName]) {\n            node = data.cache[nodeName].cloneNode();\n        } else if (saveClones.test(nodeName)) {\n            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n        } else {\n            node = data.createElem(nodeName);\n        }\n\n        // Avoid adding some elements to fragments in IE < 9 because\n        // * Attributes like `name` or `type` cannot be set/changed once an element\n        //   is inserted into a document/fragment\n        // * Link elements with `src` attributes that are inaccessible, as with\n        //   a 403 response, will cause the tab/window to crash\n        // * Script elements appended to fragments will execute when their `src`\n        //   or `text` property is set\n        return node.canHaveChildren && !reSkip.test(nodeName) ? data.frag.appendChild(node) : node;\n      }\n\n      /**\n       * returns a shived DocumentFragment for the given document\n       * @memberOf html5\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived DocumentFragment.\n       */\n      function createDocumentFragment(ownerDocument, data){\n        if (!ownerDocument) {\n            ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n            return ownerDocument.createDocumentFragment();\n        }\n        data = data || getExpandoData(ownerDocument);\n        var clone = data.frag.cloneNode(),\n            i = 0,\n            elems = getElements(),\n            l = elems.length;\n        for(;i<l;i++){\n            clone.createElement(elems[i]);\n        }\n        return clone;\n      }\n\n      /**\n       * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n       * @private\n       * @param {Document|DocumentFragment} ownerDocument The document.\n       * @param {Object} data of the document.\n       */\n      function shivMethods(ownerDocument, data) {\n        if (!data.cache) {\n            data.cache = {};\n            data.createElem = ownerDocument.createElement;\n            data.createFrag = ownerDocument.createDocumentFragment;\n            data.frag = data.createFrag();\n        }\n\n\n        ownerDocument.createElement = function(nodeName) {\n          //abort shiv\n          if (!html5.shivMethods) {\n              return data.createElem(nodeName);\n          }\n          return createElement(nodeName, ownerDocument, data);\n        };\n\n        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n          'var n=f.cloneNode(),c=n.createElement;' +\n          'h.shivMethods&&(' +\n            // unroll the `createElement` calls\n            getElements().join().replace(/\\w+/g, function(nodeName) {\n              data.createElem(nodeName);\n              data.frag.createElement(nodeName);\n              return 'c(\"' + nodeName + '\")';\n            }) +\n          ');return n}'\n        )(html5, data.frag);\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Shivs the given document.\n       * @memberOf html5\n       * @param {Document} ownerDocument The document to shiv.\n       * @returns {Document} The shived document.\n       */\n      function shivDocument(ownerDocument) {\n        if (!ownerDocument) {\n            ownerDocument = document;\n        }\n        var data = getExpandoData(ownerDocument);\n\n        if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n          data.hasCSS = !!addStyleSheet(ownerDocument,\n            // corrects block display not defined in IE6/7/8/9\n            'article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}' +\n            // adds styling not present in IE6/7/8/9\n            'mark{background:#FF0;color:#000}'\n          );\n        }\n        if (!supportsUnknownElements) {\n          shivMethods(ownerDocument, data);\n        }\n        return ownerDocument;\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * The `html5` object is exposed so that more elements can be shived and\n       * existing shiving can be detected on iframes.\n       * @type Object\n       * @example\n       *\n       * // options can be changed before the script is included\n       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n       */\n      var html5 = {\n\n        /**\n         * An array or space separated string of node names of the elements to shiv.\n         * @memberOf html5\n         * @type Array|String\n         */\n        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video',\n\n        /**\n         * A flag to indicate that the HTML5 style sheet should be inserted.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivCSS': (options.shivCSS !== false),\n\n        /**\n         * Is equal to true if a browser supports creating unknown/HTML5 elements\n         * @memberOf html5\n         * @type boolean\n         */\n        'supportsUnknownElements': supportsUnknownElements,\n\n        /**\n         * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n         * methods should be overwritten.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivMethods': (options.shivMethods !== false),\n\n        /**\n         * A string to describe the type of `html5` object (\"default\" or \"default print\").\n         * @memberOf html5\n         * @type String\n         */\n        'type': 'default',\n\n        // shivs the document according to the specified `html5` object options\n        'shivDocument': shivDocument,\n\n        //creates a shived element\n        createElement: createElement,\n\n        //creates a shived documentFragment\n        createDocumentFragment: createDocumentFragment\n      };\n\n      /*--------------------------------------------------------------------------*/\n\n      // expose html5\n      window.html5 = html5;\n\n      // shiv the document\n      shivDocument(document);\n\n    }(this, document));\n    /*>>shiv*/\n\n    // Assign private properties to the return object with prefix\n    Modernizr._version      = version;\n\n    // expose these for the plugin API. Look in the source for how to join() them against your input\n    /*>>prefixes*/\n    Modernizr._prefixes     = prefixes;\n    /*>>prefixes*/\n    /*>>domprefixes*/\n    Modernizr._domPrefixes  = domPrefixes;\n    Modernizr._cssomPrefixes  = cssomPrefixes;\n    /*>>domprefixes*/\n\n    /*>>mq*/\n    // Modernizr.mq tests a given media query, live against the current state of the window\n    // A few important notes:\n    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false\n    //   * A max-width or orientation query will be evaluated against the current state, which may change later.\n    //   * You must specify values. Eg. If you are testing support for the min-width media query use:\n    //       Modernizr.mq('(min-width:0)')\n    // usage:\n    // Modernizr.mq('only screen and (max-width:768)')\n    Modernizr.mq            = testMediaQuery;\n    /*>>mq*/\n\n    /*>>hasevent*/\n    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on\n    // Modernizr.hasEvent('gesturestart', elem)\n    Modernizr.hasEvent      = isEventSupported;\n    /*>>hasevent*/\n\n    /*>>testprop*/\n    // Modernizr.testProp() investigates whether a given style property is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testProp('pointerEvents')\n    Modernizr.testProp      = function(prop){\n        return testProps([prop]);\n    };\n    /*>>testprop*/\n\n    /*>>testallprops*/\n    // Modernizr.testAllProps() investigates whether a given style property,\n    //   or any of its vendor-prefixed variants, is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testAllProps('boxSizing')\n    Modernizr.testAllProps  = testPropsAll;\n    /*>>testallprops*/\n\n\n    /*>>teststyles*/\n    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards\n    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })\n    Modernizr.testStyles    = injectElementWithStyles;\n    /*>>teststyles*/\n\n\n    /*>>prefixed*/\n    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input\n    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'\n\n    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.\n    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:\n    //\n    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');\n\n    // If you're trying to ascertain which transition end event to bind to, you might do something like...\n    //\n    //     var transEndEventNames = {\n    //       'WebkitTransition' : 'webkitTransitionEnd',\n    //       'MozTransition'    : 'transitionend',\n    //       'OTransition'      : 'oTransitionEnd',\n    //       'msTransition'     : 'MSTransitionEnd',\n    //       'transition'       : 'transitionend'\n    //     },\n    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\n\n    Modernizr.prefixed      = function(prop, obj, elem){\n      if(!obj) {\n        return testPropsAll(prop, 'pfx');\n      } else {\n        // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'\n        return testPropsAll(prop, obj, elem);\n      }\n    };\n    /*>>prefixed*/\n\n\n    /*>>cssclasses*/\n    // Remove \"no-js\" class from <html> element, if it exists:\n    docElement.className = docElement.className.replace(/(^|\\s)no-js(\\s|$)/, '$1$2') +\n\n                            // Add the new classes to the <html> element.\n                            (enableClasses ? ' js ' + classes.join(' ') : '');\n    /*>>cssclasses*/\n\n    return Modernizr;\n\n})(this, this.document);\n\n(function() {\n  var AjaxMonitor, Bar, DocumentMonitor, ElementMonitor, ElementTracker, EventLagMonitor, Evented, Events, NoTargetError, RequestIntercept, SOURCE_KEYS, Scaler, SocketRequestTracker, XHRRequestTracker, animation, avgAmplitude, bar, cancelAnimation, cancelAnimationFrame, defaultOptions, extend, extendNative, getFromDOM, getIntercept, handlePushState, ignoreStack, init, now, options, requestAnimationFrame, result, runAnimation, scalers, shouldIgnoreURL, shouldTrack, source, sources, uniScaler, _WebSocket, _XDomainRequest, _XMLHttpRequest, _i, _intercept, _len, _pushState, _ref, _ref1, _replaceState,\n    __slice = [].slice,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  defaultOptions = {\n    catchupTime: 500,\n    initialRate: .03,\n    minTime: 500,\n    ghostTime: 500,\n    maxProgressPerFrame: 10,\n    easeFactor: 1.25,\n    startOnPageLoad: true,\n    restartOnPushState: true,\n    restartOnRequestAfter: 500,\n    target: 'body',\n    elements: {\n      checkInterval: 100,\n      selectors: ['body']\n    },\n    eventLag: {\n      minSamples: 10,\n      sampleCount: 3,\n      lagThreshold: 3\n    },\n    ajax: {\n      trackMethods: ['GET'],\n      trackWebSockets: true,\n      ignoreURLs: []\n    }\n  };\n\n  now = function() {\n    var _ref;\n    return (_ref = typeof performance !== \"undefined\" && performance !== null ? typeof performance.now === \"function\" ? performance.now() : void 0 : void 0) != null ? _ref : +(new Date);\n  };\n\n  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n  cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;\n\n  if (requestAnimationFrame == null) {\n    requestAnimationFrame = function(fn) {\n      return setTimeout(fn, 50);\n    };\n    cancelAnimationFrame = function(id) {\n      return clearTimeout(id);\n    };\n  }\n\n  runAnimation = function(fn) {\n    var last, tick;\n    last = now();\n    tick = function() {\n      var diff;\n      diff = now() - last;\n      if (diff >= 33) {\n        last = now();\n        return fn(diff, function() {\n          return requestAnimationFrame(tick);\n        });\n      } else {\n        return setTimeout(tick, 33 - diff);\n      }\n    };\n    return tick();\n  };\n\n  result = function() {\n    var args, key, obj;\n    obj = arguments[0], key = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];\n    if (typeof obj[key] === 'function') {\n      return obj[key].apply(obj, args);\n    } else {\n      return obj[key];\n    }\n  };\n\n  extend = function() {\n    var key, out, source, sources, val, _i, _len;\n    out = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      if (source) {\n        for (key in source) {\n          if (!__hasProp.call(source, key)) continue;\n          val = source[key];\n          if ((out[key] != null) && typeof out[key] === 'object' && (val != null) && typeof val === 'object') {\n            extend(out[key], val);\n          } else {\n            out[key] = val;\n          }\n        }\n      }\n    }\n    return out;\n  };\n\n  avgAmplitude = function(arr) {\n    var count, sum, v, _i, _len;\n    sum = count = 0;\n    for (_i = 0, _len = arr.length; _i < _len; _i++) {\n      v = arr[_i];\n      sum += Math.abs(v);\n      count++;\n    }\n    return sum / count;\n  };\n\n  getFromDOM = function(key, json) {\n    var data, e, el;\n    if (key == null) {\n      key = 'options';\n    }\n    if (json == null) {\n      json = true;\n    }\n    el = document.querySelector(\"[data-pace-\" + key + \"]\");\n    if (!el) {\n      return;\n    }\n    data = el.getAttribute(\"data-pace-\" + key);\n    if (!json) {\n      return data;\n    }\n    try {\n      return JSON.parse(data);\n    } catch (_error) {\n      e = _error;\n      return typeof console !== \"undefined\" && console !== null ? console.error(\"Error parsing inline pace options\", e) : void 0;\n    }\n  };\n\n  Evented = (function() {\n    function Evented() {}\n\n    Evented.prototype.on = function(event, handler, ctx, once) {\n      var _base;\n      if (once == null) {\n        once = false;\n      }\n      if (this.bindings == null) {\n        this.bindings = {};\n      }\n      if ((_base = this.bindings)[event] == null) {\n        _base[event] = [];\n      }\n      return this.bindings[event].push({\n        handler: handler,\n        ctx: ctx,\n        once: once\n      });\n    };\n\n    Evented.prototype.once = function(event, handler, ctx) {\n      return this.on(event, handler, ctx, true);\n    };\n\n    Evented.prototype.off = function(event, handler) {\n      var i, _ref, _results;\n      if (((_ref = this.bindings) != null ? _ref[event] : void 0) == null) {\n        return;\n      }\n      if (handler == null) {\n        return delete this.bindings[event];\n      } else {\n        i = 0;\n        _results = [];\n        while (i < this.bindings[event].length) {\n          if (this.bindings[event][i].handler === handler) {\n            _results.push(this.bindings[event].splice(i, 1));\n          } else {\n            _results.push(i++);\n          }\n        }\n        return _results;\n      }\n    };\n\n    Evented.prototype.trigger = function() {\n      var args, ctx, event, handler, i, once, _ref, _ref1, _results;\n      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      if ((_ref = this.bindings) != null ? _ref[event] : void 0) {\n        i = 0;\n        _results = [];\n        while (i < this.bindings[event].length) {\n          _ref1 = this.bindings[event][i], handler = _ref1.handler, ctx = _ref1.ctx, once = _ref1.once;\n          handler.apply(ctx != null ? ctx : this, args);\n          if (once) {\n            _results.push(this.bindings[event].splice(i, 1));\n          } else {\n            _results.push(i++);\n          }\n        }\n        return _results;\n      }\n    };\n\n    return Evented;\n\n  })();\n\n  if (window.Pace == null) {\n    window.Pace = {};\n  }\n\n  extend(Pace, Evented.prototype);\n\n  options = Pace.options = extend({}, defaultOptions, window.paceOptions, getFromDOM());\n\n  _ref = ['ajax', 'document', 'eventLag', 'elements'];\n  for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n    source = _ref[_i];\n    if (options[source] === true) {\n      options[source] = defaultOptions[source];\n    }\n  }\n\n  NoTargetError = (function(_super) {\n    __extends(NoTargetError, _super);\n\n    function NoTargetError() {\n      _ref1 = NoTargetError.__super__.constructor.apply(this, arguments);\n      return _ref1;\n    }\n\n    return NoTargetError;\n\n  })(Error);\n\n  Bar = (function() {\n    function Bar() {\n      this.progress = 0;\n    }\n\n    Bar.prototype.getElement = function() {\n      var targetElement;\n      if (this.el == null) {\n        targetElement = document.querySelector(options.target);\n        if (!targetElement) {\n          throw new NoTargetError;\n        }\n        this.el = document.createElement('div');\n        this.el.className = \"pace pace-active\";\n        document.body.className = document.body.className.replace(/pace-done/g, '');\n        document.body.className += ' pace-running';\n        this.el.innerHTML = '<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>';\n        if (targetElement.firstChild != null) {\n          targetElement.insertBefore(this.el, targetElement.firstChild);\n        } else {\n          targetElement.appendChild(this.el);\n        }\n      }\n      return this.el;\n    };\n\n    Bar.prototype.finish = function() {\n      var el;\n      el = this.getElement();\n      el.className = el.className.replace('pace-active', '');\n      el.className += ' pace-inactive';\n      document.body.className = document.body.className.replace('pace-running', '');\n      return document.body.className += ' pace-done';\n    };\n\n    Bar.prototype.update = function(prog) {\n      this.progress = prog;\n      return this.render();\n    };\n\n    Bar.prototype.destroy = function() {\n      try {\n        this.getElement().parentNode.removeChild(this.getElement());\n      } catch (_error) {\n        NoTargetError = _error;\n      }\n      return this.el = void 0;\n    };\n\n    Bar.prototype.render = function() {\n      var el, progressStr;\n      if (document.querySelector(options.target) == null) {\n        return false;\n      }\n      el = this.getElement();\n      el.children[0].style.width = \"\" + this.progress + \"%\";\n      if (!this.lastRenderedProgress || this.lastRenderedProgress | 0 !== this.progress | 0) {\n        el.children[0].setAttribute('data-progress-text', \"\" + (this.progress | 0) + \"%\");\n        if (this.progress >= 100) {\n          progressStr = '99';\n        } else {\n          progressStr = this.progress < 10 ? \"0\" : \"\";\n          progressStr += this.progress | 0;\n        }\n        el.children[0].setAttribute('data-progress', \"\" + progressStr);\n      }\n      return this.lastRenderedProgress = this.progress;\n    };\n\n    Bar.prototype.done = function() {\n      return this.progress >= 100;\n    };\n\n    return Bar;\n\n  })();\n\n  Events = (function() {\n    function Events() {\n      this.bindings = {};\n    }\n\n    Events.prototype.trigger = function(name, val) {\n      var binding, _j, _len1, _ref2, _results;\n      if (this.bindings[name] != null) {\n        _ref2 = this.bindings[name];\n        _results = [];\n        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n          binding = _ref2[_j];\n          _results.push(binding.call(this, val));\n        }\n        return _results;\n      }\n    };\n\n    Events.prototype.on = function(name, fn) {\n      var _base;\n      if ((_base = this.bindings)[name] == null) {\n        _base[name] = [];\n      }\n      return this.bindings[name].push(fn);\n    };\n\n    return Events;\n\n  })();\n\n  _XMLHttpRequest = window.XMLHttpRequest;\n\n  _XDomainRequest = window.XDomainRequest;\n\n  _WebSocket = window.WebSocket;\n\n  extendNative = function(to, from) {\n    var e, key, val, _results;\n    _results = [];\n    for (key in from.prototype) {\n      try {\n        val = from.prototype[key];\n        if ((to[key] == null) && typeof val !== 'function') {\n          _results.push(to[key] = val);\n        } else {\n          _results.push(void 0);\n        }\n      } catch (_error) {\n        e = _error;\n      }\n    }\n    return _results;\n  };\n\n  ignoreStack = [];\n\n  Pace.ignore = function() {\n    var args, fn, ret;\n    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    ignoreStack.unshift('ignore');\n    ret = fn.apply(null, args);\n    ignoreStack.shift();\n    return ret;\n  };\n\n  Pace.track = function() {\n    var args, fn, ret;\n    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    ignoreStack.unshift('track');\n    ret = fn.apply(null, args);\n    ignoreStack.shift();\n    return ret;\n  };\n\n  shouldTrack = function(method) {\n    var _ref2;\n    if (method == null) {\n      method = 'GET';\n    }\n    if (ignoreStack[0] === 'track') {\n      return 'force';\n    }\n    if (!ignoreStack.length && options.ajax) {\n      if (method === 'socket' && options.ajax.trackWebSockets) {\n        return true;\n      } else if (_ref2 = method.toUpperCase(), __indexOf.call(options.ajax.trackMethods, _ref2) >= 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  RequestIntercept = (function(_super) {\n    __extends(RequestIntercept, _super);\n\n    function RequestIntercept() {\n      var monitorXHR,\n        _this = this;\n      RequestIntercept.__super__.constructor.apply(this, arguments);\n      monitorXHR = function(req) {\n        var _open;\n        _open = req.open;\n        return req.open = function(type, url, async) {\n          if (shouldTrack(type)) {\n            _this.trigger('request', {\n              type: type,\n              url: url,\n              request: req\n            });\n          }\n          return _open.apply(req, arguments);\n        };\n      };\n      window.XMLHttpRequest = function(flags) {\n        var req;\n        req = new _XMLHttpRequest(flags);\n        monitorXHR(req);\n        return req;\n      };\n      try {\n        extendNative(window.XMLHttpRequest, _XMLHttpRequest);\n      } catch (_error) {}\n      if (_XDomainRequest != null) {\n        window.XDomainRequest = function() {\n          var req;\n          req = new _XDomainRequest;\n          monitorXHR(req);\n          return req;\n        };\n        try {\n          extendNative(window.XDomainRequest, _XDomainRequest);\n        } catch (_error) {}\n      }\n      if ((_WebSocket != null) && options.ajax.trackWebSockets) {\n        window.WebSocket = function(url, protocols) {\n          var req;\n          if (protocols != null) {\n            req = new _WebSocket(url, protocols);\n          } else {\n            req = new _WebSocket(url);\n          }\n          if (shouldTrack('socket')) {\n            _this.trigger('request', {\n              type: 'socket',\n              url: url,\n              protocols: protocols,\n              request: req\n            });\n          }\n          return req;\n        };\n        try {\n          extendNative(window.WebSocket, _WebSocket);\n        } catch (_error) {}\n      }\n    }\n\n    return RequestIntercept;\n\n  })(Events);\n\n  _intercept = null;\n\n  getIntercept = function() {\n    if (_intercept == null) {\n      _intercept = new RequestIntercept;\n    }\n    return _intercept;\n  };\n\n  shouldIgnoreURL = function(url) {\n    var pattern, _j, _len1, _ref2;\n    _ref2 = options.ajax.ignoreURLs;\n    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n      pattern = _ref2[_j];\n      if (typeof pattern === 'string') {\n        if (url.indexOf(pattern) !== -1) {\n          return true;\n        }\n      } else {\n        if (pattern.test(url)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  getIntercept().on('request', function(_arg) {\n    var after, args, request, type, url;\n    type = _arg.type, request = _arg.request, url = _arg.url;\n    if (shouldIgnoreURL(url)) {\n      return;\n    }\n    if (!Pace.running && (options.restartOnRequestAfter !== false || shouldTrack(type) === 'force')) {\n      args = arguments;\n      after = options.restartOnRequestAfter || 0;\n      if (typeof after === 'boolean') {\n        after = 0;\n      }\n      return setTimeout(function() {\n        var stillActive, _j, _len1, _ref2, _ref3, _results;\n        if (type === 'socket') {\n          stillActive = request.readyState < 2;\n        } else {\n          stillActive = (0 < (_ref2 = request.readyState) && _ref2 < 4);\n        }\n        if (stillActive) {\n          Pace.restart();\n          _ref3 = Pace.sources;\n          _results = [];\n          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {\n            source = _ref3[_j];\n            if (source instanceof AjaxMonitor) {\n              source.watch.apply(source, args);\n              break;\n            } else {\n              _results.push(void 0);\n            }\n          }\n          return _results;\n        }\n      }, after);\n    }\n  });\n\n  AjaxMonitor = (function() {\n    function AjaxMonitor() {\n      var _this = this;\n      this.elements = [];\n      getIntercept().on('request', function() {\n        return _this.watch.apply(_this, arguments);\n      });\n    }\n\n    AjaxMonitor.prototype.watch = function(_arg) {\n      var request, tracker, type, url;\n      type = _arg.type, request = _arg.request, url = _arg.url;\n      if (shouldIgnoreURL(url)) {\n        return;\n      }\n      if (type === 'socket') {\n        tracker = new SocketRequestTracker(request);\n      } else {\n        tracker = new XHRRequestTracker(request);\n      }\n      return this.elements.push(tracker);\n    };\n\n    return AjaxMonitor;\n\n  })();\n\n  XHRRequestTracker = (function() {\n    function XHRRequestTracker(request) {\n      var event, size, _j, _len1, _onreadystatechange, _ref2,\n        _this = this;\n      this.progress = 0;\n      if (window.ProgressEvent != null) {\n        size = null;\n        request.addEventListener('progress', function(evt) {\n          if (evt.lengthComputable) {\n            return _this.progress = 100 * evt.loaded / evt.total;\n          } else {\n            return _this.progress = _this.progress + (100 - _this.progress) / 2;\n          }\n        }, false);\n        _ref2 = ['load', 'abort', 'timeout', 'error'];\n        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n          event = _ref2[_j];\n          request.addEventListener(event, function() {\n            return _this.progress = 100;\n          }, false);\n        }\n      } else {\n        _onreadystatechange = request.onreadystatechange;\n        request.onreadystatechange = function() {\n          var _ref3;\n          if ((_ref3 = request.readyState) === 0 || _ref3 === 4) {\n            _this.progress = 100;\n          } else if (request.readyState === 3) {\n            _this.progress = 50;\n          }\n          return typeof _onreadystatechange === \"function\" ? _onreadystatechange.apply(null, arguments) : void 0;\n        };\n      }\n    }\n\n    return XHRRequestTracker;\n\n  })();\n\n  SocketRequestTracker = (function() {\n    function SocketRequestTracker(request) {\n      var event, _j, _len1, _ref2,\n        _this = this;\n      this.progress = 0;\n      _ref2 = ['error', 'open'];\n      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n        event = _ref2[_j];\n        request.addEventListener(event, function() {\n          return _this.progress = 100;\n        }, false);\n      }\n    }\n\n    return SocketRequestTracker;\n\n  })();\n\n  ElementMonitor = (function() {\n    function ElementMonitor(options) {\n      var selector, _j, _len1, _ref2;\n      if (options == null) {\n        options = {};\n      }\n      this.elements = [];\n      if (options.selectors == null) {\n        options.selectors = [];\n      }\n      _ref2 = options.selectors;\n      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n        selector = _ref2[_j];\n        this.elements.push(new ElementTracker(selector));\n      }\n    }\n\n    return ElementMonitor;\n\n  })();\n\n  ElementTracker = (function() {\n    function ElementTracker(selector) {\n      this.selector = selector;\n      this.progress = 0;\n      this.check();\n    }\n\n    ElementTracker.prototype.check = function() {\n      var _this = this;\n      if (document.querySelector(this.selector)) {\n        return this.done();\n      } else {\n        return setTimeout((function() {\n          return _this.check();\n        }), options.elements.checkInterval);\n      }\n    };\n\n    ElementTracker.prototype.done = function() {\n      return this.progress = 100;\n    };\n\n    return ElementTracker;\n\n  })();\n\n  DocumentMonitor = (function() {\n    DocumentMonitor.prototype.states = {\n      loading: 0,\n      interactive: 50,\n      complete: 100\n    };\n\n    function DocumentMonitor() {\n      var _onreadystatechange, _ref2,\n        _this = this;\n      this.progress = (_ref2 = this.states[document.readyState]) != null ? _ref2 : 100;\n      _onreadystatechange = document.onreadystatechange;\n      document.onreadystatechange = function() {\n        if (_this.states[document.readyState] != null) {\n          _this.progress = _this.states[document.readyState];\n        }\n        return typeof _onreadystatechange === \"function\" ? _onreadystatechange.apply(null, arguments) : void 0;\n      };\n    }\n\n    return DocumentMonitor;\n\n  })();\n\n  EventLagMonitor = (function() {\n    function EventLagMonitor() {\n      var avg, interval, last, points, samples,\n        _this = this;\n      this.progress = 0;\n      avg = 0;\n      samples = [];\n      points = 0;\n      last = now();\n      interval = setInterval(function() {\n        var diff;\n        diff = now() - last - 50;\n        last = now();\n        samples.push(diff);\n        if (samples.length > options.eventLag.sampleCount) {\n          samples.shift();\n        }\n        avg = avgAmplitude(samples);\n        if (++points >= options.eventLag.minSamples && avg < options.eventLag.lagThreshold) {\n          _this.progress = 100;\n          return clearInterval(interval);\n        } else {\n          return _this.progress = 100 * (3 / (avg + 3));\n        }\n      }, 50);\n    }\n\n    return EventLagMonitor;\n\n  })();\n\n  Scaler = (function() {\n    function Scaler(source) {\n      this.source = source;\n      this.last = this.sinceLastUpdate = 0;\n      this.rate = options.initialRate;\n      this.catchup = 0;\n      this.progress = this.lastProgress = 0;\n      if (this.source != null) {\n        this.progress = result(this.source, 'progress');\n      }\n    }\n\n    Scaler.prototype.tick = function(frameTime, val) {\n      var scaling;\n      if (val == null) {\n        val = result(this.source, 'progress');\n      }\n      if (val >= 100) {\n        this.done = true;\n      }\n      if (val === this.last) {\n        this.sinceLastUpdate += frameTime;\n      } else {\n        if (this.sinceLastUpdate) {\n          this.rate = (val - this.last) / this.sinceLastUpdate;\n        }\n        this.catchup = (val - this.progress) / options.catchupTime;\n        this.sinceLastUpdate = 0;\n        this.last = val;\n      }\n      if (val > this.progress) {\n        this.progress += this.catchup * frameTime;\n      }\n      scaling = 1 - Math.pow(this.progress / 100, options.easeFactor);\n      this.progress += scaling * this.rate * frameTime;\n      this.progress = Math.min(this.lastProgress + options.maxProgressPerFrame, this.progress);\n      this.progress = Math.max(0, this.progress);\n      this.progress = Math.min(100, this.progress);\n      this.lastProgress = this.progress;\n      return this.progress;\n    };\n\n    return Scaler;\n\n  })();\n\n  sources = null;\n\n  scalers = null;\n\n  bar = null;\n\n  uniScaler = null;\n\n  animation = null;\n\n  cancelAnimation = null;\n\n  Pace.running = false;\n\n  handlePushState = function() {\n    if (options.restartOnPushState) {\n      return Pace.restart();\n    }\n  };\n\n  if (window.history.pushState != null) {\n    _pushState = window.history.pushState;\n    window.history.pushState = function() {\n      handlePushState();\n      return _pushState.apply(window.history, arguments);\n    };\n  }\n\n  if (window.history.replaceState != null) {\n    _replaceState = window.history.replaceState;\n    window.history.replaceState = function() {\n      handlePushState();\n      return _replaceState.apply(window.history, arguments);\n    };\n  }\n\n  SOURCE_KEYS = {\n    ajax: AjaxMonitor,\n    elements: ElementMonitor,\n    document: DocumentMonitor,\n    eventLag: EventLagMonitor\n  };\n\n  (init = function() {\n    var type, _j, _k, _len1, _len2, _ref2, _ref3, _ref4;\n    Pace.sources = sources = [];\n    _ref2 = ['ajax', 'elements', 'document', 'eventLag'];\n    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n      type = _ref2[_j];\n      if (options[type] !== false) {\n        sources.push(new SOURCE_KEYS[type](options[type]));\n      }\n    }\n    _ref4 = (_ref3 = options.extraSources) != null ? _ref3 : [];\n    for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {\n      source = _ref4[_k];\n      sources.push(new source(options));\n    }\n    Pace.bar = bar = new Bar;\n    scalers = [];\n    return uniScaler = new Scaler;\n  })();\n\n  Pace.stop = function() {\n    Pace.trigger('stop');\n    Pace.running = false;\n    bar.destroy();\n    cancelAnimation = true;\n    if (animation != null) {\n      if (typeof cancelAnimationFrame === \"function\") {\n        cancelAnimationFrame(animation);\n      }\n      animation = null;\n    }\n    return init();\n  };\n\n  Pace.restart = function() {\n    Pace.trigger('restart');\n    Pace.stop();\n    return Pace.start();\n  };\n\n  Pace.go = function() {\n    var start;\n    Pace.running = true;\n    bar.render();\n    start = now();\n    cancelAnimation = false;\n    return animation = runAnimation(function(frameTime, enqueueNextFrame) {\n      var avg, count, done, element, elements, i, j, remaining, scaler, scalerList, sum, _j, _k, _len1, _len2, _ref2;\n      remaining = 100 - bar.progress;\n      count = sum = 0;\n      done = true;\n      for (i = _j = 0, _len1 = sources.length; _j < _len1; i = ++_j) {\n        source = sources[i];\n        scalerList = scalers[i] != null ? scalers[i] : scalers[i] = [];\n        elements = (_ref2 = source.elements) != null ? _ref2 : [source];\n        for (j = _k = 0, _len2 = elements.length; _k < _len2; j = ++_k) {\n          element = elements[j];\n          scaler = scalerList[j] != null ? scalerList[j] : scalerList[j] = new Scaler(element);\n          done &= scaler.done;\n          if (scaler.done) {\n            continue;\n          }\n          count++;\n          sum += scaler.tick(frameTime);\n        }\n      }\n      avg = sum / count;\n      bar.update(uniScaler.tick(frameTime, avg));\n      if (bar.done() || done || cancelAnimation) {\n        bar.update(100);\n        Pace.trigger('done');\n        return setTimeout(function() {\n          bar.finish();\n          Pace.running = false;\n          return Pace.trigger('hide');\n        }, Math.max(options.ghostTime, Math.max(options.minTime - (now() - start), 0)));\n      } else {\n        return enqueueNextFrame();\n      }\n    });\n  };\n\n  Pace.start = function(_options) {\n    extend(options, _options);\n    Pace.running = true;\n    try {\n      bar.render();\n    } catch (_error) {\n      NoTargetError = _error;\n    }\n    if (!document.querySelector('.pace')) {\n      return setTimeout(Pace.start, 50);\n    } else {\n      Pace.trigger('start');\n      return Pace.go();\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return Pace;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = Pace;\n  } else {\n    if (options.startOnPageLoad) {\n      Pace.start();\n    }\n  }\n\n}).call(this);\n\n//# sourceMappingURL=data:application/json;base64,"]}